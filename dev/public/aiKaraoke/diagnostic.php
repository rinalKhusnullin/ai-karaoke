<?php
// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ generate_karaoke.php
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

require($_SERVER["DOCUMENT_ROOT"] . "/bitrix/modules/main/include/prolog_before.php");

echo "<h1>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä–∞–æ–∫–µ</h1>";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
require_once __DIR__ . '/config.php';

echo "<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:</h3>";
echo "<p>API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: " . (AIKaraokeConfig::isAPIKeyConfigured() ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "</p>";
echo "<p>–î–ª–∏–Ω–∞ API –∫–ª—é—á–∞: " . strlen(AIKaraokeConfig::getOpenAIKey()) . "</p>";

$uploadDir = AIKaraokeConfig::getUploadDir();
$imagesDir = AIKaraokeConfig::getImagesDir();

echo "<p>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫: " . $uploadDir . "</p>";
echo "<p>–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏: " . (is_writable($uploadDir) ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "</p>";
echo "<p>–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: " . $imagesDir . "</p>";
echo "<p>–ü—Ä–∞–≤–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: " . (is_writable($imagesDir) ? "‚úÖ –î–ê" : "‚ùå –ù–ï–¢") . "</p>";

echo "<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:</h3>";

try {
    require_once __DIR__ . '/generate_karaoke.php';
    echo "<p>‚úÖ –§–∞–π–ª generate_karaoke.php –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ</p>";

    if (class_exists('KaraokeGenerator')) {
        echo "<p>‚úÖ –ö–ª–∞—Å—Å KaraokeGenerator –Ω–∞–π–¥–µ–Ω</p>";

        $generator = new KaraokeGenerator();
        echo "<p>‚úÖ –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ</p>";
    } else {
        echo "<p>‚ùå –ö–ª–∞—Å—Å KaraokeGenerator –Ω–µ –Ω–∞–π–¥–µ–Ω</p>";
    }
} catch (Exception $e) {
    echo "<p>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: " . htmlspecialchars($e->getMessage()) . "</p>";
    echo "<p>‚ùå –°—Ç–µ–∫: " . htmlspecialchars($e->getTraceAsString()) . "</p>";
}

echo "<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫ PHP:</h3>";
$lastError = error_get_last();
if ($lastError) {
    echo "<pre>";
    echo "–¢–∏–ø: " . $lastError['type'] . "\n";
    echo "–°–æ–æ–±—â–µ–Ω–∏–µ: " . htmlspecialchars($lastError['message']) . "\n";
    echo "–§–∞–π–ª: " . $lastError['file'] . "\n";
    echo "–°—Ç—Ä–æ–∫–∞: " . $lastError['line'] . "\n";
    echo "</pre>";
} else {
    echo "<p>‚úÖ –û—à–∏–±–æ–∫ PHP –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>";
}

echo "<h3>–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥—É–ª–µ–π –ë–∏—Ç—Ä–∏–∫—Å:</h3>";
if (class_exists('\Bitrix\Main\Loader')) {
    echo "<p>‚úÖ Bitrix Loader –¥–æ—Å—Ç—É–ø–µ–Ω</p>";

    try {
        \Bitrix\Main\Loader::requireModule('sign');
        echo "<p>‚úÖ –ú–æ–¥—É–ª—å 'sign' –∑–∞–≥—Ä—É–∂–µ–Ω</p>";
    } catch (Exception $e) {
        echo "<p>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è 'sign': " . htmlspecialchars($e->getMessage()) . "</p>";
    }
} else {
    echo "<p>‚ùå Bitrix Loader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</p>";
}

echo "<h3>–¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞:</h3>";
if (AIKaraokeConfig::isAPIKeyConfigured()) {
    echo "<p>–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ OpenAI...</p>";

    $data = [
        'model' => 'gpt-3.5-turbo',
        'messages' => [
            ['role' => 'user', 'content' => 'Say hello']
        ],
        'max_tokens' => 10
    ];

    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, 'https://api.openai.com/v1/chat/completions');
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($ch, CURLOPT_POST, true);
    curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($data));
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
        'Content-Type: application/json',
        'Authorization: Bearer ' . AIKaraokeConfig::getOpenAIKey()
    ]);

    $response = curl_exec($ch);
    $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
    curl_close($ch);

    echo "<p>HTTP –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: " . $httpCode . "</p>";
    if ($httpCode === 200) {
        echo "<p>‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!</p>";
    } else {
        echo "<p>‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º. –û—Ç–≤–µ—Ç: " . htmlspecialchars($response) . "</p>";
    }
} else {
    echo "<p>‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</p>";
}

echo '<p style="margin-top: 30px;">';
echo '<a href="index.php" style="background: #007bff; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>';
echo '</p>';
?>
